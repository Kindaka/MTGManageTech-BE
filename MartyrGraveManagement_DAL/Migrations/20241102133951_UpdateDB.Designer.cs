// <auto-generated />
using System;
using MartyrGraveManagement_DAL.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MartyrGraveManagement_DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241102133951_UpdateDB")]
    partial class UpdateDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("AreaId")
                        .HasColumnType("int");

                    b.Property<string>("AvatarPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("AccountId");

                    b.HasIndex("RoleId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.Area", b =>
                {
                    b.Property<int>("AreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AreaId"));

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("AreaId");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.Attendance", b =>
                {
                    b.Property<int>("AttendanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttendanceId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("AttendanceId");

                    b.HasIndex("AccountId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.Blog", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("BlogContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("BlogDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("BlogName")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("HistoryId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BlogId");

                    b.HasIndex("AccountId");

                    b.HasIndex("HistoryId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.CartItemCustomer", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("MartyrId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("CartId");

                    b.HasIndex("AccountId");

                    b.HasIndex("MartyrId");

                    b.HasIndex("ServiceId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CommentId");

                    b.HasIndex("AccountId");

                    b.HasIndex("BlogId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.Comment_Icon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IconId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CommentId");

                    b.HasIndex("IconId");

                    b.ToTable("Comment_Icons");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.Comment_Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ReportId");

                    b.HasIndex("AccountId");

                    b.HasIndex("CommentId");

                    b.ToTable("CommentReports");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.Event_Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"));

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImageId");

                    b.HasIndex("EventId");

                    b.ToTable("EventImages");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DetailId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("ResponseContent")
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("FeedbackId");

                    b.HasIndex("AccountId");

                    b.HasIndex("DetailId")
                        .IsUnique();

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.GraveImage", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"));

                    b.Property<int>("MartyrId")
                        .HasColumnType("int");

                    b.Property<string>("UrlPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImageId");

                    b.HasIndex("MartyrId");

                    b.ToTable("GraveImages");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.GraveService", b =>
                {
                    b.Property<int>("GraveServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GraveServiceId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MartyrId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("GraveServiceId");

                    b.HasIndex("MartyrId");

                    b.HasIndex("ServiceId");

                    b.ToTable("GraveServices");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.HistoricalEvent", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HistoryId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("HistoryEventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("HistoryId");

                    b.ToTable("HistoricalEvent");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.HistoricalImage", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"));

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImageId");

                    b.HasIndex("BlogId");

                    b.ToTable("HistoricalImages");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.HistoricalRelatedMartyr", b =>
                {
                    b.Property<int>("RelatedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RelatedId"));

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<int>("InformationId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("RelatedId");

                    b.HasIndex("BlogId");

                    b.HasIndex("InformationId");

                    b.ToTable("HistoricalRelatedMartyrs");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.Holiday_Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<DateOnly>("EventDate")
                        .HasColumnType("date");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("EventId");

                    b.HasIndex("AccountId");

                    b.ToTable("HolidayEvents");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.Icon", b =>
                {
                    b.Property<int>("IconId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IconId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("IconImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconName")
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IconId");

                    b.ToTable("Icons");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<int>("AreaNumber")
                        .HasColumnType("int");

                    b.Property<int>("MartyrNumber")
                        .HasColumnType("int");

                    b.Property<int>("RowNumber")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.MartyrGrave", b =>
                {
                    b.Property<int>("MartyrId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MartyrId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("MartyrCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("MartyrId");

                    b.HasIndex("AccountId");

                    b.HasIndex("AreaId");

                    b.HasIndex("LocationId")
                        .IsUnique();

                    b.ToTable("MartyrGraves");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.MartyrGraveInformation", b =>
                {
                    b.Property<int>("InformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InformationId"));

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfSacrifice")
                        .HasColumnType("datetime2");

                    b.Property<string>("HomeTown")
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("MartyrId")
                        .HasColumnType("int");

                    b.Property<string>("Medal")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NickName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ReasonOfSacrifice")
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("InformationId");

                    b.HasIndex("MartyrId");

                    b.ToTable("MartyrGraveInformations");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.Material", b =>
                {
                    b.Property<int>("MaterialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaterialId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaterialName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("MaterialId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("NotificationId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.NotificationAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("NotificationId");

                    b.ToTable("NotificationAccounts");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpectedCompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResponseContent")
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderId");

                    b.HasIndex("AccountId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.OrderDetail", b =>
                {
                    b.Property<int>("DetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DetailId"));

                    b.Property<int>("MartyrId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<double>("OrderPrice")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("DetailId");

                    b.HasIndex("MartyrId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ServiceId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<string>("BankCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankTransactionNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PayDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PaymentInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransactionStatus")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.HasIndex("OrderId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.Schedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduleId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<int>("SlotId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TaskId")
                        .HasColumnType("int");

                    b.HasKey("ScheduleId");

                    b.HasIndex("SlotId");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.ScheduleDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("TaskId");

                    b.ToTable("ScheduleDetail");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ServiceId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.ServiceCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UrlImageCategory")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("ServiceCategories");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.Slot", b =>
                {
                    b.Property<int>("SlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SlotId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<string>("SlotName")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("SlotId");

                    b.ToTable("Slots");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.StaffTask", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("DetailId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagePath1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("TaskId");

                    b.HasIndex("AccountId");

                    b.HasIndex("DetailId")
                        .IsUnique();

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.WeeklyReportGrave", b =>
                {
                    b.Property<int>("WeeklyReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WeeklyReportId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("DisciplinePoint")
                        .HasColumnType("int");

                    b.Property<int>("MartyrId")
                        .HasColumnType("int");

                    b.Property<int>("QualityOfFlowerPoint")
                        .HasColumnType("int");

                    b.Property<int>("QualityOfTotalGravePoint")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("WeeklyReportId");

                    b.HasIndex("MartyrId");

                    b.ToTable("WeeklyReportGraves");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.WorkPerformance", b =>
                {
                    b.Property<int>("WorkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("InteractionPoint")
                        .HasColumnType("int");

                    b.Property<int>("QualityMaintenancePoint")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TimeCompletePoint")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadTime")
                        .HasColumnType("datetime2");

                    b.HasKey("WorkId");

                    b.HasIndex("AccountId");

                    b.ToTable("WorkPerformances");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.Account", b =>
                {
                    b.HasOne("MartyrGraveManagement_DAL.Entities.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.Attendance", b =>
                {
                    b.HasOne("MartyrGraveManagement_DAL.Entities.Account", "Account")
                        .WithMany("Attendances")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MartyrGraveManagement_DAL.Entities.Schedule", "Schedule")
                        .WithMany("Attendances")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.Blog", b =>
                {
                    b.HasOne("MartyrGraveManagement_DAL.Entities.Account", "Account")
                        .WithMany("Blogs")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MartyrGraveManagement_DAL.Entities.HistoricalEvent", "HistoricalEvent")
                        .WithMany("Blogs")
                        .HasForeignKey("HistoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("HistoricalEvent");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.CartItemCustomer", b =>
                {
                    b.HasOne("MartyrGraveManagement_DAL.Entities.Account", "Account")
                        .WithMany("CartItems")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MartyrGraveManagement_DAL.Entities.MartyrGrave", "MartyrGrave")
                        .WithMany("CartItems")
                        .HasForeignKey("MartyrId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MartyrGraveManagement_DAL.Entities.Service", "Service")
                        .WithMany("CartItems")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("MartyrGrave");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.Comment", b =>
                {
                    b.HasOne("MartyrGraveManagement_DAL.Entities.Account", "Account")
                        .WithMany("Comments")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MartyrGraveManagement_DAL.Entities.Blog", "Blog")
                        .WithMany("Comments")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.Comment_Icon", b =>
                {
                    b.HasOne("MartyrGraveManagement_DAL.Entities.Account", "Account")
                        .WithMany("Comment_Icons")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MartyrGraveManagement_DAL.Entities.Comment", "Comment")
                        .WithMany("Comment_Icons")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MartyrGraveManagement_DAL.Entities.Icon", "Icon")
                        .WithMany("Comment_Icons")
                        .HasForeignKey("IconId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Comment");

                    b.Navigation("Icon");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.Comment_Report", b =>
                {
                    b.HasOne("MartyrGraveManagement_DAL.Entities.Account", "Account")
                        .WithMany("Comment_Reports")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MartyrGraveManagement_DAL.Entities.Comment", "Comment")
                        .WithMany("Comment_Reports")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.Event_Image", b =>
                {
                    b.HasOne("MartyrGraveManagement_DAL.Entities.Holiday_Event", "Holiday_Event")
                        .WithMany("EventImages")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Holiday_Event");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.Feedback", b =>
                {
                    b.HasOne("MartyrGraveManagement_DAL.Entities.Account", "Account")
                        .WithMany("Feedbacks")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MartyrGraveManagement_DAL.Entities.OrderDetail", "OrderDetail")
                        .WithOne("Feedback")
                        .HasForeignKey("MartyrGraveManagement_DAL.Entities.Feedback", "DetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.GraveImage", b =>
                {
                    b.HasOne("MartyrGraveManagement_DAL.Entities.MartyrGrave", "MartyrGrave")
                        .WithMany("GraveImages")
                        .HasForeignKey("MartyrId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MartyrGrave");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.GraveService", b =>
                {
                    b.HasOne("MartyrGraveManagement_DAL.Entities.MartyrGrave", "MartyrGrave")
                        .WithMany("GraveServices")
                        .HasForeignKey("MartyrId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MartyrGraveManagement_DAL.Entities.Service", "Service")
                        .WithMany("GraveServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MartyrGrave");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.HistoricalImage", b =>
                {
                    b.HasOne("MartyrGraveManagement_DAL.Entities.Blog", "Blog")
                        .WithMany("HistoricalImages")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.HistoricalRelatedMartyr", b =>
                {
                    b.HasOne("MartyrGraveManagement_DAL.Entities.Blog", "Blog")
                        .WithMany("HistoricalRelatedMartyrs")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MartyrGraveManagement_DAL.Entities.MartyrGraveInformation", "MartyrGraveInformation")
                        .WithMany("HistoricalRelatedMartyrs")
                        .HasForeignKey("InformationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("MartyrGraveInformation");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.Holiday_Event", b =>
                {
                    b.HasOne("MartyrGraveManagement_DAL.Entities.Account", "Account")
                        .WithMany("Holiday_Events")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.MartyrGrave", b =>
                {
                    b.HasOne("MartyrGraveManagement_DAL.Entities.Account", "Account")
                        .WithMany("MartyrGraves")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MartyrGraveManagement_DAL.Entities.Area", "Area")
                        .WithMany("MartyrGraves")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MartyrGraveManagement_DAL.Entities.Location", "Location")
                        .WithOne("MartyrGraves")
                        .HasForeignKey("MartyrGraveManagement_DAL.Entities.MartyrGrave", "LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Area");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.MartyrGraveInformation", b =>
                {
                    b.HasOne("MartyrGraveManagement_DAL.Entities.MartyrGrave", "MartyrGrave")
                        .WithMany("MartyrGraveInformations")
                        .HasForeignKey("MartyrId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MartyrGrave");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.Material", b =>
                {
                    b.HasOne("MartyrGraveManagement_DAL.Entities.Service", "Service")
                        .WithMany("Materials")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.NotificationAccount", b =>
                {
                    b.HasOne("MartyrGraveManagement_DAL.Entities.Account", "Account")
                        .WithMany("NotificationAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MartyrGraveManagement_DAL.Entities.Notification", "Notification")
                        .WithMany("NotificationAccounts")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.Order", b =>
                {
                    b.HasOne("MartyrGraveManagement_DAL.Entities.Account", "Account")
                        .WithMany("Orders")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.OrderDetail", b =>
                {
                    b.HasOne("MartyrGraveManagement_DAL.Entities.MartyrGrave", "MartyrGrave")
                        .WithMany("OrderDetails")
                        .HasForeignKey("MartyrId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MartyrGraveManagement_DAL.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MartyrGraveManagement_DAL.Entities.Service", "Service")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MartyrGrave");

                    b.Navigation("Order");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.Payment", b =>
                {
                    b.HasOne("MartyrGraveManagement_DAL.Entities.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.Schedule", b =>
                {
                    b.HasOne("MartyrGraveManagement_DAL.Entities.Slot", "Slot")
                        .WithMany("Schedules")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.ScheduleDetail", b =>
                {
                    b.HasOne("MartyrGraveManagement_DAL.Entities.Account", "Account")
                        .WithMany("ScheduleTasks")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MartyrGraveManagement_DAL.Entities.Schedule", "Schedule")
                        .WithMany("ScheduleTasks")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MartyrGraveManagement_DAL.Entities.StaffTask", "StaffTask")
                        .WithMany("ScheduleTasks")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Schedule");

                    b.Navigation("StaffTask");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.Service", b =>
                {
                    b.HasOne("MartyrGraveManagement_DAL.Entities.ServiceCategory", "ServiceCategory")
                        .WithMany("Services")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ServiceCategory");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.StaffTask", b =>
                {
                    b.HasOne("MartyrGraveManagement_DAL.Entities.Account", "Account")
                        .WithMany("Tasks")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MartyrGraveManagement_DAL.Entities.OrderDetail", "OrderDetail")
                        .WithOne("StaffTask")
                        .HasForeignKey("MartyrGraveManagement_DAL.Entities.StaffTask", "DetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.WeeklyReportGrave", b =>
                {
                    b.HasOne("MartyrGraveManagement_DAL.Entities.MartyrGrave", "MartyrGrave")
                        .WithMany("WeeklyReportGraves")
                        .HasForeignKey("MartyrId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MartyrGrave");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.WorkPerformance", b =>
                {
                    b.HasOne("MartyrGraveManagement_DAL.Entities.Account", "Account")
                        .WithMany("WorkPerformances")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.Account", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("Blogs");

                    b.Navigation("CartItems");

                    b.Navigation("Comment_Icons");

                    b.Navigation("Comment_Reports");

                    b.Navigation("Comments");

                    b.Navigation("Feedbacks");

                    b.Navigation("Holiday_Events");

                    b.Navigation("MartyrGraves");

                    b.Navigation("NotificationAccounts");

                    b.Navigation("Orders");

                    b.Navigation("ScheduleTasks");

                    b.Navigation("Tasks");

                    b.Navigation("WorkPerformances");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.Area", b =>
                {
                    b.Navigation("MartyrGraves");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.Blog", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("HistoricalImages");

                    b.Navigation("HistoricalRelatedMartyrs");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.Comment", b =>
                {
                    b.Navigation("Comment_Icons");

                    b.Navigation("Comment_Reports");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.HistoricalEvent", b =>
                {
                    b.Navigation("Blogs");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.Holiday_Event", b =>
                {
                    b.Navigation("EventImages");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.Icon", b =>
                {
                    b.Navigation("Comment_Icons");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.Location", b =>
                {
                    b.Navigation("MartyrGraves");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.MartyrGrave", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("GraveImages");

                    b.Navigation("GraveServices");

                    b.Navigation("MartyrGraveInformations");

                    b.Navigation("OrderDetails");

                    b.Navigation("WeeklyReportGraves");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.MartyrGraveInformation", b =>
                {
                    b.Navigation("HistoricalRelatedMartyrs");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.Notification", b =>
                {
                    b.Navigation("NotificationAccounts");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.OrderDetail", b =>
                {
                    b.Navigation("Feedback");

                    b.Navigation("StaffTask");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.Schedule", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("ScheduleTasks");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.Service", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("GraveServices");

                    b.Navigation("Materials");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.ServiceCategory", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.Slot", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("MartyrGraveManagement_DAL.Entities.StaffTask", b =>
                {
                    b.Navigation("ScheduleTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
